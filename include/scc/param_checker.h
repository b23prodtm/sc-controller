/*
SC Controller - ParamChecker

Helper used to check parameters. ParamChecker is created using regex-like
expression and then can be used to check if ParameterList matches this expression.

Additionally, scc_param_checker_fill_defaults method can be used to fill optional parameters
with provided defaults, simplifying parsing parameters.

ParamChecker is meant to be allocated at start and kept in memory forever, so unlike rest of
project, there is little memory checking and no tools for freeing here. Should memory for
ParamChecker not be available, it's designed to crash.

Supported characters:
 - ' '	space - ignored
 - s	string
 - i	integer, may be followed by '8', '16' or '32' to specify range.
 		If not specified otherwise, 'i' means 64bit integer
 - u	unsigned. Has to be followed by 'i8', 'i16' or 'i32'
 - c	keycode. This is special case of integer in range from 1 to 0x7FFF
 - x	axis. This is shortcut for 'u8', for values between ABS_X and ABS_MAX, 0 to 63
 - b	boolean. Also known as integer in range from 0 to 1
 - f	float
 - a	action
 - r	range
 - B	button name (string). If extended with '+', allows 'SAME' and 'DEFAULT' used in menus
 - A	axis name (string). If extended with '+', allows 'SAME' and 'DEFAULT' used in menus
 - .	anything. Just skipped over, not checked at all

 - ?	marks previous parameter as optional
 - *	marks previous parameter as repeating, matching any (including zero) instances
 - +	after i16 or i32 restricts range to positive numbers
 - (	in form of (min,max) specifies limit for float and integer parameter

Example:
 - c?a	- optional integer larger than zero followed by action
 - ssi?	- two strings optionaly followed by integer
*/

#pragma once
#include "scc/parameter.h"
#include "scc/error.h"
#include <stdbool.h>
#include <stdint.h>

typedef struct ParamChecker ParamChecker;
typedef struct ParamData ParamData;

struct ParamChecker {
	ParamData**				data;
	size_t					length;
	Parameter**				defaults;
	size_t					defaults_count;
};

void scc_param_checker_init(ParamChecker* pc, const char* expression);

/**
 * Sets defaults used by scc_param_checker_fill_defaults.
 * There is a lot of weird with this method:
 *  - vararg part works like printf, taking any variable type and converting it
 *    based on chars in ParamChecker specification.
 *  - there are no checks on that outside of checking if ints are in range.
 *  - int has to be int. No byte, short or long int, that will crash.
 *  - parameters generated by this method and actions passed to it will have
 *    memory management turned off, they shall never be deallocated.
 *  - as special exception, NoAction can be supplied by NULL.
 *  - any passed string has to be constant and shall not be deallocated.
 */
void scc_param_checker_set_defaults(ParamChecker* pc, ...);

/**
 * Performs actual checking. 'keyword' argument is copied to potential error message.
 * Returs NULL if everything is OK, or ParamError describing what went wrong.
 *
 * Returned ParamError, if any, has to be dereferenced manually.
 */
ParamError* scc_param_checker_check(ParamChecker* pc, const char* keyword, ParameterList params);

/**
 * Creates copy of ParameterList with defaults filled according to ParamChecker
 * specification. Parameters supplied in original are not replaced.
 * Reference counter on non-default Parameters are properly increased, so
 * returned ParameterList can be safelly freed using scc_param_list_free.
 *
 * Returns NULL if allocation fails.
 */
ParameterList scc_param_checker_fill_defaults(ParamChecker* pc, ParameterList original);

/**
 * Removes default values from passed ParameterList.
 * Unlike scc_param_checker_fill_defaults, this method modifies list in place
 * and so it cannot fail.
 *
 * It safe to call this on NULL ParameterList, NULL is returned.
 *
 * Returns same ParameterList.
 */
ParameterList scc_param_checker_strip_defaults(ParamChecker* pc, ParameterList list_to_change);

/** Creates new instance of 'invalid_number_of_parameters' error */
ParamError* invalid_number_of_parameters(const char* keyword);

